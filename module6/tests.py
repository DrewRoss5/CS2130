import unittest
from io import StringIO
from unittest.mock import patch

from permutation import Permutation
from combination import Combination

class PermutationTests(unittest.TestCase):

    def test_permutation1(self):
        p = Permutation([0, 1, 2])
        perm = p.get_permutation()
        self.assertEqual([0, 1, 2], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 2, 1], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([1, 0, 2], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([1, 2, 0], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([2, 0, 1], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([2, 1, 0], perm)
        p.next_permutation()
        perm = p.get_permutation()
        print(f"PERM: {perm}")
        self.assertEqual([0, 1, 2], perm)

    def test_permutation2(self):
        p = Permutation([0, 1, 2, 3, 4, 5])
        perm = p.get_permutation()
        self.assertEqual([0, 1, 2, 3, 4, 5], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 1, 2, 3, 5, 4], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 1, 2, 4, 3, 5], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 1, 2, 4, 5, 3], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 1, 2, 5, 3, 4], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 1, 2, 5, 4, 3], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 1, 3, 2, 4, 5], perm)
        p.set_permutation([0, 1, 5, 4, 3, 2])
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 2, 1, 3, 4, 5], perm)
        p.set_permutation([0, 4, 5, 3, 2, 1])
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 5, 1, 2, 3, 4], perm)
        p.set_permutation([4, 5, 2, 3, 1, 0])
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([4, 5, 3, 0, 1, 2], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([4, 5, 3, 0, 2, 1], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([4, 5, 3, 1, 0, 2], perm)
        p.set_permutation([4, 5, 3, 2, 1, 0])
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([5, 0, 1, 2, 3, 4], perm)
        p.set_permutation([5, 4, 3, 0, 1, 2])
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([5, 4, 3, 0, 2, 1], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([5, 4, 3, 1, 0, 2], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([5, 4, 3, 1, 2, 0], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([5, 4, 3, 2, 0, 1], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([5, 4, 3, 2, 1, 0], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 1, 2, 3, 4, 5], perm)

    def test_permutation3(self):
        p = Permutation([0, 2, 4, 6, 8, 10])
        perm = p.get_permutation()
        self.assertEqual([0, 2, 4, 6, 8, 10], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 2, 4, 6, 10, 8], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 2, 4, 8, 6, 10], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 2, 4, 8, 10, 6], perm)
        p.set_permutation([0, 2, 10, 8, 6, 4])
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 4, 2, 6, 8, 10], perm)
        p.set_permutation([0, 8, 10, 6, 4, 2])
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 10, 2, 4, 6, 8], perm)
        p.set_permutation([8, 10, 6, 4, 2, 0])
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([10, 0, 2, 4, 6, 8], perm)
        p.set_permutation([10, 8, 6, 2, 0, 4])
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([10, 8, 6, 2, 4, 0], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([10, 8, 6, 4, 0, 2], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([10, 8, 6, 4, 2, 0], perm)
        p.next_permutation()
        perm = p.get_permutation()
        self.assertEqual([0, 2, 4, 6, 8, 10], perm)

    @patch('sys.stdout', new_callable=StringIO)
    def test_print_all_permutations(self, mock_print):
        p = Permutation([1, 2, 3])
        p.print_all_permutations()
        self.assertEqual('\n'.join(['[1, 2, 3]',
                                    '[1, 3, 2]',
                                    '[2, 1, 3]',
                                    '[2, 3, 1]',
                                    '[3, 1, 2]',
                                    '[3, 2, 1]',
                                    '']), mock_print.getvalue())

class CombinationTests(unittest.TestCase):

    def test_combination1(self):
        values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        c = Combination(values, 5)
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 3, 4], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 3, 5], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 3, 6], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 3, 7], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 3, 8], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 3, 9], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 4, 5], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 4, 6], combo)
        c.set_combination([0, 1, 2, 4, 9])
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 5, 6], combo)
        c.set_combination([0, 1, 2, 8, 9])
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 3, 4, 5], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 3, 4, 6], combo)
        c.set_combination([0, 6, 7, 8, 9])
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([1, 2, 3, 4, 5], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([1, 2, 3, 4, 6], combo)
        c.set_combination([4, 5, 7, 8, 9])
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([4, 6, 7, 8, 9], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([5, 6, 7, 8, 9], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 1, 2, 3, 4], combo)

    def test_combination2(self):
        values = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
        c = Combination(values, 5)
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 6, 8], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 6, 10], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 6, 12], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 6, 14], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 6, 16], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 6, 18], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 8, 10], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 8, 12], combo)
        c.set_combination([0, 2, 4, 8, 18])
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 10, 12], combo)
        c.set_combination([0, 2, 4, 16, 18])
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 6, 8, 10], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 6, 8, 12], combo)
        c.set_combination([0, 12, 14, 16, 18])
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([2, 4, 6, 8, 10], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([2, 4, 6, 8, 12], combo)
        c.set_combination([8, 10, 14, 16, 18])
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([8, 12, 14, 16, 18], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([10, 12, 14, 16, 18], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0, 2, 4, 6, 8], combo)

    def test_combination3(self):
        values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        c = Combination(values, 1)
        combo = c.get_combination()
        self.assertEqual([0], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([1], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([2], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([3], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([4], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([5], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([6], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([7], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([8], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([9], combo)
        c.next_combination()
        combo = c.get_combination()
        self.assertEqual([0], combo)

    @patch('sys.stdout', new_callable=StringIO)
    def test_print_all_combinations(self, mock_print):
        c = Combination([1, 2, 3, 4, 5], 2)
        c.print_all_combinations()
        self.assertEqual('\n'.join(["[1, 2]",
                                    "[1, 3]",
                                    "[1, 4]",
                                    "[1, 5]",
                                    "[2, 3]",
                                    "[2, 4]",
                                    "[2, 5]",
                                    "[3, 4]",
                                    "[3, 5]",
                                    "[4, 5]",
                                    ""]), mock_print.getvalue())
        mock_print.seek(0)
        mock_print.truncate()
        c = Combination([1, 2, 3, 4, 5], 3)
        c.print_all_combinations()
        self.assertEqual('\n'.join(["[1, 2, 3]",
                                    "[1, 2, 4]",
                                    "[1, 2, 5]",
                                    "[1, 3, 4]",
                                    "[1, 3, 5]",
                                    "[1, 4, 5]",
                                    "[2, 3, 4]",
                                    "[2, 3, 5]",
                                    "[2, 4, 5]",
                                    "[3, 4, 5]",
                                    ""]), mock_print.getvalue())
